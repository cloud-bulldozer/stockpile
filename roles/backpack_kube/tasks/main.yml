---
- name: Set facts
  set_fact:
    elasticsearch:
      server: "{{ elasticsearch.server | default('none') }}"
      port: "{{ elasticsearch.port | default('12345') }}"

- name: set UUID
  set_fact: uuid={{ (999999999999999999999 | random | string + (lookup('pipe', 'date +%s%N'))) | to_uuid() | string }}

- name: set trunc_uuid
  set_fact: trunc_uuid={{ uuid.split('-')[0] }}

- name: Create Backpack Namespace
  k8s: 
    name: "{{ operator_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Create Service Account
  k8s:
    state: present
    definition: "{{ lookup('template', 'backpack_sa.yml') | from_yaml }}"
  when: metadata_sa is defined

- name: Create Service Account token
  k8s:
    state: present
    definition: "{{ lookup('template', 'backpack_token.yml') | from_yaml }}"
  when: metadata_sa is defined

- name: Create role binding for service account
  k8s:
    state: present
    definition: "{{ lookup('template', 'backpack_role_binding.yml') | from_yaml }}"
  when: metadata_sa is defined

- name: Create backpack DaemonSet
  k8s:
    state: present
    definition: "{{ lookup('template', 'backpack.yml') | from_yaml }}"
  register: my_daemonset

- name: Wait for daemonset to be ready
  k8s_facts:
    api_version: apps/v1
    kind: DaemonSet
    name: "backpack-{{ trunc_uuid }}"
    namespace: "{{ operator_namespace }}"
  register: my_daemonset
  until: "my_daemonset | json_query('resources[].status.desiredNumberScheduled') == my_daemonset | json_query('resources[].status.numberReady') and my_daemonset | json_query('resources[].status.numberReady') != 0 "
  retries: 120
  delay: 5

- name: Create backpack output directory
  file:
    path: "{{ backpack_output_dir }}"
    state: directory
    mode: "u=rw,g=rwx,o=rwx"

- name: Get pod list
  k8s_facts:
    kind: Pod
    namespace: "{{ operator_namespace }}"
    label_selectors:
      - name = backpack-{{ trunc_uuid }}
  register: pod_list

- name: Dump logs to temporary directory
  shell: "/usr/local/bin/kubectl -n {{ operator_namespace }} cp {{ item }}:/tmp/stockpile.json {{ backpack_output_dir }}/{{ item }}"
  with_items:
    - "{{ pod_list | json_query('resources[].metadata.name') }}"

- name: Replace pod name with node name
  replace:
    path: "{{ backpack_output_dir }}/{{ item.metadata.name }}"
    regexp: "{{ item.metadata.name }}"
    replace: "{{ item.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution | json_query('nodeSelectorTerms[].matchFields[].values')|first|first }}"
  with_items:
      - "{{ pod_list.resources }}"

- name: Replace leading localhost with node name
  replace:
    path: "{{ backpack_output_dir }}/{{ item.metadata.name }}"
    regexp: 'localhost\": {'
    replace: "{{ item.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution | json_query('nodeSelectorTerms[].matchFields[].values')|first|first }}\": {"
  with_items:
      - "{{ pod_list.resources }}"

- name: Delete backpack DaemonSet
  k8s:
    state: absent
    definition: "{{ lookup('template', 'backpack.yml') | from_yaml }}"

- name: Delete role binding for service account
  k8s:
    state: absent
    definition: "{{ lookup('template', 'backpack_role_binding.yml') | from_yaml }}"
  when: metadata_sa is defined

- name: Delete Service Account token
  k8s:
    state: absent
    definition: "{{ lookup('template', 'backpack_token.yml') | from_yaml }}"
  when: metadata_sa is defined

- name: Delete Service Account
  k8s:
    state: absent
    definition: "{{ lookup('template', 'backpack_sa.yml') | from_yaml }}"
  when: metadata_sa is defined

- name: Delete backpack namespace
  k8s:
    name: "{{ operator_namespace }}"
    api_version: v1
    kind: Namespace
    state: absent
    wait: yes
    wait_condition:
      type: Terminating
      status: True
    wait_timeout: 300

- name: Clear unneeded facts
  set_fact:
    my_daemon_set: !!null
    pod_list: !!null
    done_count: !!null
    file_info: !!null
