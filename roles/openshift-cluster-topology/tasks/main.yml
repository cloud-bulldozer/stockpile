---
- name: check if oc client is installed
  command: which oc
  register: oc_installed
  ignore_errors: yes

- name: check if kubeconfig exists
  stat:
    path: "{{ ansible_env.HOME }}/.kube/config"
  register: kubeconfig

- name: print debug msg if oc client or kubeconfig doesn't exist
  debug:
    msg: Skipping the ocp collection, cannot find kubeconfig at "{{ ansible_env.HOME }}/.kube/config" or oc client is not installed, please check.
  when: ( oc_installed.rc != 0 or not kubeconfig.stat.exists )

- block:
    - name: get pods in all namespaces
      command: oc get pods --all-namespaces -o json
      register: ocp_running_pods

    - name: get openshift app node count
      shell:  oc get nodes -l node-role.kubernetes.io/compute | grep -w "Ready" | wc -l
      register: ocp_compute_count

    - name: get openshift masters node count
      shell: oc get nodes -l node-role.kubernetes.io/master | grep -w "Ready" | wc -l
      register: ocp_master_count

    - name: ocp network operator
      command: oc get networks.operator.openshift.io cluster -o json
      register: ocp_network_operator

    - name: ocp host subnets
      command: oc get hostsubnet -o json
      register: host_subnets

    - name: ocp dns config
      command: oc get dns -o json
      register: ocp_dns

    - name: versions
      command: oc version -o json
      register: versions

    - set_fact:
        oc_client_version: "{{ versions.stdout | from_json | json_query('clientVersion.gitVersion') }}"
        oc_server_version: "{{ versions.stdout | from_json | json_query('openshiftVersion') }}"
        kube_server_version: "{{ versions.stdout | from_json | json_query('serverVersion.gitVersion') }}"

    - name: cluster version
      command: oc get clusterversion version -o json
      register: ocp_cluster_version

    - name: cluster operators
      command: oc get co -o json
      register: ocp_cluster_operators

    - name: kubelet configs
      command: oc get kubeletconfig -o json
      register: ocp_kubeletconfig

    - name: apiserver config
      command: oc get apiserver -o json
      register: ocp_apiserver

    - name: network attachment definitions
      command: oc get network-attachment-definitions -A -o json
      register: ocp_networkattachments

    - name: tuned profiles
      command: oc get tuned -n openshift-cluster-node-tuning-operator -o json
      register: ocp_tuned

    - name: openshift user
      command: oc whoami
      register: ocp_user

    - name: services
      command: oc get svc --all-namespaces -o json
      register: ocp_svc

    - name: services accounts
      command: oc get sa --all-namespaces -o json
      register: ocp_sa

    - name: security context constraints
      command: oc get scc --all-namespaces -o json
      register: ocp_scc

    - name: storage classes
      command: oc get sc -o json
      register: ocp_sc

    - name: persistent volumes
      command: oc get pv --all-namespaces -o json
      register: ocp_pv

    - name: persistent volume claims
      command: oc get pvc --all-namespaces -o json
      register: ocp_pvc

    - name: set the collected info as facts
      set_fact:
        stockpile_openshift_cluster_topology:
          running_pods_count: "{{ ocp_running_pods.stdout | from_json | json_query('items[].status.phase') | length }}"
          compute_count: "{{ ocp_compute_count.stdout }}"
          master_count: "{{ ocp_master_count.stdout }}"
          etcd_count: "{{ ocp_master_count.stdout }}"
          client_version: "{{ oc_client_version }}"
          server_version: "{{ oc_server_version }}"
          kubernetes_server_version: "{{ kube_server_version }}"
          user: "{{ ocp_user.stdout }}"
          services: "{{ ocp_svc.stdout }}"
          service_accounts: "{{ ocp_sa.stdout }}"
          security_context_constraints: "{{ ocp_scc.stdout }}"
          persistent_volumes: "{{ ocp_pv.stdout }}"
          persistent_volume_claim: "{{ ocp_pvc.stdout }}"
          storage_classes: "{{ ocp_sc.stdout }}"
          ocp_network_operator: "{{ ocp_network_operator.stdout }}"
          ocp_dns: "{{ ocp_dns.stdout }}"
          ocp_host_subnets: "{{ ocp_host_subnets | default('') }}"
          ocp_cluster_version: "{{ ocp_cluster_version }}"
          ocp_cluster_operators: "{{ ocp_cluster_operators.stdout }}"
          ocp_kubeletconfig: "{{ ocp_kubeletconfig.stdout }}"
          ocp_apiserver: "{{ ocp_apiserver.stdout }}"
          ocp_networkattachments: "{{ ocp_networkattachments.stdout }}"
          ocp_tuned: "{{ ocp_tuned.stdout }}"
  when: ( oc_installed.rc == 0 and kubeconfig.stat.exists )
