---
- name: check if oc client is installed
  shell: which oc
  register: oc_installed
  ignore_errors: yes

- name: check if kubeconfig exists
  stat:
    path: "{{ ansible_env.HOME }}/.kube/config"
  register: kubeconfig

- name: print debug msg if oc client or kubeconfig doesn't exist
  debug:
    msg: Skipping the ocp collection, cannot find kubeconfig at "{{ ansible_env.HOME }}/.kube/config" or oc client is not installed, please check.
  when: ( oc_installed.rc != 0 or kubeconfig.stat.exists == False )

- block:
    - name: get pods in all namespaces
      shell: oc get pods --all-namespaces -o json
      register: ocp_running_pods

    - name: get openshift app node count
      shell:  oc get nodes -l node-role.kubernetes.io/compute=true | grep -w "Ready" | wc -l
      register: ocp_compute_count

    - name: openshift masters and etcd count assuming that masters are etcd are co-located
      shell: oc get nodes -l node-role.kubernetes.io/master=true | grep -w "Ready" | wc -l
      register: ocp_master_count

    - name: ocp cluster network
      shell: oc get clusternetwork -o json
      register: ocp_network_plugin
    
    - name: oc client version
      shell: oc version | grep -w oc | cut -d ' ' -f2
      register: oc_client_version

    - name: oc server version
      shell: oc version | grep -w openshift | cut -d ' ' -f2
      register: oc_server_version

    - name: kubernetes server version
      shell: oc version | grep -w kubernetes | cut -d ' ' -f2 | uniq
      register: kube_server_version

    - name: openshift user
      shell: oc whoami
      register: ocp_user

    - name: infra pods
      shell: for infra_node in $(oc get nodes -l node-role.kubernetes.io/infra=true | awk 'NR>1 {print $1}' ); do oc get pods --all-namespaces --field-selector spec.nodeName=$infra_node -o wide | awk 'NR>1 {print $2}'; done
      register: ocp_infra_pods

    - name: get the system pod names in crashloop state
      shell: oc get pods -n kube-system -o wide | grep -v "Running" | awk 'NR>1 {print $1}'
      register: ocp_failed_pods

    - name: get the components status
      shell: oc get cs -o json
      register: ocp_components_status

    - name: services
      shell: oc get svc --all-namespaces -o json
      register: ocp_svc

    - name: services accounts
      shell: oc get sa --all-namespaces -o json
      register: ocp_sa

    - name: security contxt constraints
      shell: oc get scc --all-namespaces -o json
      register: ocp_scc
    
    - name: persistent volumes
      shell: oc get pv --all-namespaces -o json
      register: ocp_pv

    - name: persistent volume claims
      shell: oc get pvc --all-namespaces -o json
      register: ocp_pvc

    - name: openshift compute node config
      script: openshift_config_scraper.py node-config-compute
      register: ocp_compute_configmap 

    - name: openshift master node config
      script: openshift_config_scraper.py node-config-master
      register: ocp_master_configmap

    - name: openshift web-console config
      script: openshift_config_scraper.py webconsole-config
      register: ocp_webconsole_configmap

    - name: openshift infra node config
      script: openshift_config_scraper.py node-config-infra
      register: ocp_infra_configmap

    - name: set the collected info as facts
      set_fact:
        stockpile_openshift_cluster_topology:
          running_pods_count: "{{ ocp_running_pods.stdout | from_json | json_query('items[].status.phase') | length }}"
          compute_count: "{{ ocp_compute_count.stdout }}"
          master_count: "{{ ocp_master_count.stdout }}"
          etcd_count: "{{ ocp_master_count.stdout }}"
          cluster_network_plugin: "{{ ocp_network_plugin.stdout | from_json | json_query('items[].pluginName') }}"
          client_version: "{{ oc_client_version.stdout }}"
          server_version: "{{ oc_server_version.stdout }}"
          user: "{{ ocp_user.stdout }}"
          infra_pods: "{{ ocp_infra_pods.stdout.split('\n') }}"
          failed_system_pods: "{{ ocp_failed_pods.split('\n') }}"
          components_status: "{{ ocp_components_status.stdout }}"
          services: "{{ ocp_svc.stdout }}"
          service_accounts: "{{ ocp_sa.stdout }}"
          security_context_constraints: "{{ ocp_scc.stdout }}"
          persistent_volumes: "{{ ocp_pv.stdout }}"
          persistent_volume_claim: "{{ ocp_pvc.stdout }}"
          kubernetes_server_version: "{{ kube_server_version }}"
          node_config_compute: "{{ ocp_compute_configmap.stdout }}"
          node_config_master: "{{ ocp_master_configmap.stdout }}"
          node_config_infra: "{{ ocp_infra_configmap.stdout }}"
          web_console_config: "{{ ocp_webconsole_configmap.stdout }}"
  when: ( oc_installed.rc == 0 and kubeconfig.stat.exists == True ) 
