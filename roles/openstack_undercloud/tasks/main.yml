---

# This shouldn't be needed if ansible version >=2.5, but since browbeat has pinned
# version 2.4.1

- name: Get user's home directory
  shell: "getent passwd {{ ansible_user }} | cut -d: -f6"
  register: user_homedir

# ansible_env.HOME should've worked here
- name: Check that undercloud is installed
  stat: path={{ user_homedir.stdout }}/undercloud.conf
  register: undercloud_conf

- name: Parse config
  become: true
  script: ../openstack_common/files/openstack-config-parser.py undercloud
  when: undercloud_conf.stat.exists
  register: undercloud_data

# These won't be needed because stockpile wil run mysql and rabbitmq role against UC as well.
# - name: Get max_connections on the database
#   shell: mysql -e "show variables like 'max_connections';" | grep max_connections | awk '{print $2}'
#   register: max_conn
#   ignore_errors: true
#   when: undercloud_conf.stat.exists
#
# - name: Set max database connections
#   set_fact:
#     openstack_mysql_max_connections: "{{ max_conn.stdout }}"
#   when: undercloud_conf.stat.exists
#
# - name : Get file descriptors for the mysql process
#   shell: cat /proc/$(pgrep mysqld_safe)/limits | grep "open files" | awk '{print $4}'
#   register: mysql_desc
#   when: undercloud_conf.stat.exists
#
# - name: Set file descriptors fact for mysql
#   set_fact:
#     openstack_mysql_file_descriptors: "{{ mysql_desc.stdout }}"
#   when: undercloud_conf.stat.exists
#
# - name : Get rabbitmq file descriptors
#   shell: rabbitmqctl status | grep total_limit |  awk -F',' '{print $2}' | sed 's/.$//'
#   register: rabbitmq_desc
#   ignore_errors: true
#   when: undercloud_conf.stat.exists


# ansible_env.HOME should've worked here
- name: Get Controller Nodes number
  shell: source {{ user_homedir.stdout }}/stackrc; nova list | grep controller | grep ACTIVE | wc -l
  register: controller_count
  when: undercloud_conf.stat.exists

- name: Get Compute Nodes number
  shell: source {{ user_homedir.stdout }}/stackrc; nova list | grep compute | grep ACTIVE | wc -l
  register: compute_count
  when: undercloud_conf.stat.exists

- name: setting fact
  set_fact:
    stockpile_openstack_undercloud: "{{ undercloud_data.stdout }}"
    stockpile_osp_enviroment:
      osp_controllers_number: "{{ controller_count.stdout }}"
      osp_computes_number: "{{ compute_count.stdout }}"
  when: undercloud_data is succeeded and undercloud_conf.stat.exists

- name: Get ovs version
  shell: ovs-vsctl --version | grep vSwitch | awk {'print$4'}
  register: ovs_version
  ignore_errors: true

- name: Set ovs version fact
  set_fact:
    stockpile_osp_undercloud_ovs_version: "{{ ovs_version.stdout }}"
  when: ovs_version.rc == 0

# Following are currently helpful for RHOSP only
- name: Get details of stackrc
  stat:
    path: {{ user_homedir.stdout }}/stackrc
  register: undercloud_stackrc

- name: Get undercloud install date
  command: undercloud_stackrc.stat.mtime | gawk '{print strftime("%c", $0)}'
  register: undercloud_build_date
  when: undercloud_stackrc.stat.exists

- name: Set fact for UC install date
  set_fact:
    stockpile_rhosp_undercloud_build: "{{ undercloud_build_date.stdout }}"
  when: undercloud_stackrc.stat.exists

- name: Get the build for openstack version
  shell: grep "baseurl=" /etc/yum.repos.d/rhos-release-*.repo | head -1 | awk -F\/ '{print$11}'
  register: rhos_puddle
  ignore_errors: true

- name: Set fact for RHOSP puddle
  set_fact:
    stockpile_rhosp_puddle: rhos_puddle.stdout
  when: rhos_puddle is success and rhos_puddle.stdout != ""

- name: Set fact for OpenStack release
  set_fact:
    stockpile_rhosp_undercloud_release: "{{ lookup('file', '/etc/rhosp-release') }}"
  ignore_errors: true


